{"version":3,"file":"static/js/964.30fe5f0f.chunk.js","mappings":"gMACA,G,QAA2B,4BAA3B,EAAgE,0BAAhE,EAAuG,6BAAvG,EAA2I,uBAA3I,EAAoL,kCAApL,EAAwO,kCAAxO,EAAuR,6B,6BCS1QA,EAAa,SAACC,GAEvB,OACI,8BACKA,EAAMC,UAAUC,KAAI,SAAAC,GACjB,OACI,0BACI,SAAC,KAAD,CAASC,GAAI,aAAeD,EAAOE,GAAIC,gBAAiBC,EAAxD,SACKJ,EAAOK,SAFNC,EAAAA,EAAAA,Y,uCCLxBC,GAAsBC,EAAAA,EAAAA,GAAiB,K,SCChCC,EAAc,SAACZ,GAOxB,OACI,gCACKA,EAAMa,WAAWX,KAAI,SAAAY,GAClB,OACI,yBACKA,EAAQC,OADHN,EAAAA,EAAAA,UAKlB,gBAAKO,UAAWC,EAAhB,UACI,SAACC,EAAD,CAAkBC,SAfb,SAACC,GAEdpB,EAAMqB,mBAAmBD,EAASE,qBAmB7BJ,GAAmBK,EAAAA,EAAAA,GAA2B,CACvDC,KAAM,qBADsBD,EDtByC,SAAC,GAAoB,IAAnBE,EAAkB,EAAlBA,aAEvE,OACI,kBAAMN,SAAUM,EAAhB,WACI,gBAAKT,UAAWC,EAAhB,UACI,SAACS,EAAA,EAAD,CAAOC,YAAa,uGACbnB,KAAM,aACNoB,UAAWC,EAAAA,EACXC,SAAU,CAACC,EAAAA,EAAerB,QAGrC,gBAAKM,UAAWC,EAAhB,UACI,SAACe,EAAA,EAAD,oI,8BEaVC,EAAqD,CACvDC,cAAAA,EAAAA,GAOSC,GAAoBC,EAAAA,EAAAA,KAA6BC,EAAAA,EAAAA,KA3BtC,SAACC,GACrB,MAAO,CACHrC,UAAWqC,EAAMC,YAAYC,YAC7B3B,WAAYyB,EAAMC,YAAYE,gBAwBiDR,GACnFS,EAAAA,EAD6BN,ECxCT,SAACpC,GAErB,OACI,+BACI,iBAAKgB,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAAClB,EAAD,CAAYE,UAAWD,EAAMC,eAEjC,gBAAKe,UAAWC,EAAhB,UACI,SAACL,EAAD,CAAaC,WAAYb,EAAMa,WAClBQ,mBAAoBrB,EAAMkC","sources":["webpack://it-samurai-social/./src/components/Messages/Messages.module.css?8e7e","components/Messages/DialogItem.tsx","components/Messages/MessageForm.tsx","components/Messages/MessageItem.tsx","components/Messages/MessagesContainer.tsx","components/Messages/Messages.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Messages_messages__wdDq6\",\"dialogs\":\"Messages_dialogs__SWguT\",\"activeLink\":\"Messages_activeLink__ji9nk\",\"text\":\"Messages_text__5Rc1W\",\"sendMessageForm\":\"Messages_sendMessageForm__FjWJE\",\"sendMessageArea\":\"Messages_sendMessageArea__ZGnkN\",\"sendButton\":\"Messages_sendButton__tX1fD\"};","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from \"./Messages.module.css\";\r\nimport {DialogsArray} from '../../redux/dialogsPage-reducer';\r\nimport {v1} from \"uuid\";\r\n\r\ntype DialogItemPropsType = {\r\n    myDialogs: Array<DialogsArray>\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n\r\n    return (\r\n        <>\r\n            {props.myDialogs.map(dialog => {\r\n                return (\r\n                    <div key={v1()}>\r\n                        <NavLink to={'/messages/' + dialog.id} activeClassName={classes.activeLink}>\r\n                            {dialog.name}\r\n                        </NavLink>\r\n                    </div>\r\n                )\r\n            })}\r\n        </>\r\n    );\r\n}","import React from \"react\";\r\nimport styles from \"./Messages.module.css\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {SuperTextArea} from \"../../UI/Textarea/SuperTextArea\";\r\nimport {SuperButton} from \"../../UI/Button/SuperButton\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\nexport type MessageFormType = {\r\n    newMessage: string\r\n}\r\n\r\nconst maxLengthCreator300 = maxLengthCreator(300);\r\n\r\nexport const MessageForm: React.FC<InjectedFormProps<MessageFormType>> = ({handleSubmit}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className={styles.sendMessageArea}>\r\n                <Field placeholder={'Введите сообщение...'}\r\n                       name={'newMessage'}\r\n                       component={SuperTextArea}\r\n                       validate={[requiredField, maxLengthCreator300]}\r\n                />\r\n            </div>\r\n            <div className={styles.sendButton}>\r\n                <SuperButton>Отправить сообщение</SuperButton>\r\n            </div>\r\n        </form>\r\n    )\r\n};","import React from \"react\";\r\nimport styles from \"./Messages.module.css\";\r\nimport {v1} from \"uuid\";\r\nimport {MessagesArray} from \"../../redux/dialogsPage-reducer\";\r\nimport {MessageForm, MessageFormType} from \"./MessageForm\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\ntype MessageItemPropsType = {\r\n    myMessages: Array<MessagesArray>\r\n    sendMessageHandler: (newMessageTextForDialog: string) => void\r\n}\r\n\r\nexport const MessageItem = (props: MessageItemPropsType) => {\r\n\r\n    const onSubmit = (formData: MessageFormType) => {\r\n        //console.log(formData);\r\n        props.sendMessageHandler(formData.newMessage);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.myMessages.map(message => {\r\n                return (\r\n                    <div key={v1()}>\r\n                        {message.text}\r\n                    </div>\r\n                )\r\n            })}\r\n            <div className={styles.sendMessageForm}>\r\n                <MessageReduxForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport const MessageReduxForm = reduxForm<MessageFormType>({\r\n    form: 'dialogMessageForm' // уникальное строковое имя для каждой формы\r\n})(MessageForm)","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {DialogsArray, MessagesArray} from \"../../redux/dialogsPage-reducer\";\r\nimport {Messages} from \"./Messages\";\r\nimport {sendMessageAC} from \"../../redux/dialogsPage-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type MessagesContainerType = MapStateToPropsMessagesType & MapDispatchToPropsMessagesType;\r\n\r\ntype MapStateToPropsMessagesType = {\r\n    myDialogs: Array<DialogsArray>\r\n    myMessages: Array<MessagesArray>\r\n}\r\ntype MapDispatchToPropsMessagesType = {\r\n    sendMessageAC: (newMessageTextForDialog: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        myDialogs: state.dialogsPage.dialogsData,\r\n        myMessages: state.dialogsPage.messagesData,\r\n    }\r\n}\r\n\r\n// первоначально было так\r\n/*const mapDispatchToProps = (dispatch: Dispatch<ActionsType>) => {\r\n    return {\r\n        sendMessageHandler: () => {\r\n            dispatch(sendMessageAC());\r\n        },\r\n        onChangeMessageText: (textareaMessage: string) => {\r\n            dispatch(updateNewDialogTextAC(textareaMessage));\r\n        }\r\n    }\r\n}*/\r\n\r\nconst mapDispatchToProps: MapDispatchToPropsMessagesType = {\r\n    sendMessageAC\r\n}\r\n\r\n// Пошаговая запись без compose\r\n// let AuthRedirectComponent = withAuthRedirect(Messages);\r\n// export default connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\nexport const MessagesContainer = compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Messages);","import React from \"react\";\r\nimport styles from \"./Messages.module.css\";\r\nimport {DialogItem} from \"./DialogItem\";\r\nimport {MessageItem} from \"./MessageItem\";\r\nimport {MessagesContainerType} from \"./MessagesContainer\";\r\n\r\nexport const Messages = (props: MessagesContainerType) => {\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.messages}>\r\n                <div className={styles.dialogs}>\r\n                    <DialogItem myDialogs={props.myDialogs}/>\r\n                </div>\r\n                <div className={styles.text}>\r\n                    <MessageItem myMessages={props.myMessages}\r\n                                 sendMessageHandler={props.sendMessageAC}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}"],"names":["DialogItem","props","myDialogs","map","dialog","to","id","activeClassName","classes","name","v1","maxLengthCreator300","maxLengthCreator","MessageItem","myMessages","message","text","className","styles","MessageReduxForm","onSubmit","formData","sendMessageHandler","newMessage","reduxForm","form","handleSubmit","Field","placeholder","component","SuperTextArea","validate","requiredField","SuperButton","mapDispatchToProps","sendMessageAC","MessagesContainer","compose","connect","state","dialogsPage","dialogsData","messagesData","withAuthRedirect"],"sourceRoot":""}